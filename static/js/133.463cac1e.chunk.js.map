{"version":3,"file":"static/js/133.463cac1e.chunk.js","mappings":"+MAEaA,EAAU,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAEjC,OACE,0BACE,4BAAOD,EAAQE,KAAf,SACA,0BAAOF,EAAQG,UACf,mBAAQC,KAAK,SAASC,QAAS,WAAKJ,EAAaD,EAAS,EAA1D,sBAKL,E,SCTYM,EAAe,WAC1B,IAAMC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,MAAV,IAC1BG,GAAWF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,IAC5BC,GAAWC,EAAAA,EAAAA,MACjB,SAASZ,EAAcD,GACrBY,GAASE,EAAAA,EAAAA,IAAcd,EAAQe,IAChC,CAED,OACE,8BACGL,IACC,wBACGA,EACEH,QAAO,SAAAP,GAAO,OAAIA,EAAQE,KAAKc,cAAcC,SAASV,EAAOS,gBAC9DhB,EAAQG,OAAOc,SAASV,EADT,IAEdW,KAAI,SAAAlB,GAAO,OACV,yBACE,SAACD,EAAD,CAASC,QAASA,EAASC,aAAcA,KADlCD,EAAQe,GADP,OASvB,ECzBYI,EAAO,WAClB,IAAMP,GAAWC,EAAAA,EAAAA,MAWjB,OACE,iCACE,uCACA,kBAAMO,SAbW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACnBZ,GAASa,EAAAA,EAAAA,IAAW,CAClBF,EAAKG,SAASxB,KAAKyB,MACnBJ,EAAKG,SAASvB,OAAOwB,SAEvBJ,EAAKK,OACN,EAKG,WACE,qCACA,mBACA,kBACExB,KAAK,OACLF,KAAK,OACL2B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,mBACA,uCACA,mBACA,kBACE3B,KAAK,MACLF,KAAK,SACL2B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBACA,mBAAQ3B,KAAK,SAAb,8BAIP,ECxCY4B,EAAQ,WACnB,IAAMpB,GAAWC,EAAAA,EAAAA,MAQf,OACE,4BACE,sCACA,kBAAOT,KAAK,OAAO6B,SAVJ,SAAAZ,GACnBA,EAAMC,iBACN,IAAMY,EAAQb,EAAMG,OACrBZ,ECPM,CACLR,KAAM,kBACN+B,QDKuBD,EAAMP,OAC9B,MASF,EEjBYS,EAAe,SAAA3B,GAAK,OAAIA,EAAMC,SAAS2B,SAAnB,EACpBC,EAAW,SAAA7B,GAAK,OAAIA,EAAMC,SAAS6B,KAAnB,ECqB7B,EAjBqB,WAEnB,IAAMF,GAAY7B,EAAAA,EAAAA,IAAY4B,GACxBG,GAAQ/B,EAAAA,EAAAA,IAAY8B,GAEzB,OACE,4BACE,SAACN,EAAD,KACA,SAACb,EAAD,KACA,SAACb,EAAD,IACC+B,IAAcE,IAAS,uCACvBA,IAAS,uBAAIA,MAIpB,C","sources":["components/Molecules/Contact/Contact.jsx","components/Organisms/ContactsList/ContactsList.jsx","components/Organisms/Form/Form.js","components/Organisms/Filter/Filter.jsx","redux/actions.js","redux/selectors.js","components/Organisms/ContactsPage/ContactsPage.js"],"sourcesContent":["import { PropTypes } from 'prop-types';\n\nexport const Contact = ({ contact, handleDelete }) => {\n  \n  return (\n    <p>\n      <span>{contact.name}: </span>\n      <span>{contact.number}</span>\n      <button type=\"button\" onClick={()=>{handleDelete(contact)}}>\n        delete\n      </button>\n    </p>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  })\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Contact } from '../../Molecules/Contact/Contact';\nimport { deleteContact } from '../../../redux/operations';\n\nexport const ContactsList = () => {\n  const filter = useSelector(state => state.filter);\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n  function handleDelete (contact){\n    dispatch(deleteContact(contact.id));\n  }\n\n  return (\n    <>\n      {contacts && (\n        <ul>\n          {contacts\n            .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase())||\n            contact.number.includes(filter))\n            .map(contact => (\n              <li key={contact.id}>\n                <Contact contact={contact} handleDelete={handleDelete} />\n              </li>\n            ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { addContact } from '../../../redux/operations';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    dispatch(addContact([\n      form.elements.name.value, \n      form.elements.number.value]\n    ));\n    form.reset();\n  };\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <form onSubmit={handleSubmit}>\n        <label>Name</label>\n        <br />\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <br />\n        <label>Number</label>\n        <br />\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <br />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { filterContacts } from \"../../../redux/actions\";\n\nexport const Filter =()=> {\n  const dispatch = useDispatch();\n  const handleFilter = event => {\n    event.preventDefault();\n    const input = event.target;\n   dispatch(filterContacts(input.value));\n  }\n\n\n    return (\n      <div>\n        <h2>Contacts</h2>\n        <input type=\"text\" onChange={handleFilter} />\n      </div>\n    );\n}\n","export const filterContacts = text => {\n  return {\n    type: 'contacts/filter',\n    payload: text,\n  };\n};\n","export const fetchContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const filterContacts = state => state.filter;","import { ContactsList } from '../ContactsList/ContactsList';\nimport { Form } from '../Form/Form.js';\nimport { Filter } from '../Filter/Filter.jsx';\nimport { getError, getIsLoading } from '../../../redux/selectors';\nimport { useSelector } from 'react-redux'\n\nconst ContactsPage = () => {\n\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n   return (\n     <div>\n       <Filter />\n       <Form />\n       <ContactsList/> \n       {isLoading && !error && <p>Loading... </p>}\n       {error && <p>{error}</p>}\n     </div>\n   );\n\n}\n\nexport default ContactsPage;"],"names":["Contact","contact","handleDelete","name","number","type","onClick","ContactsList","filter","useSelector","state","contacts","items","dispatch","useDispatch","deleteContact","id","toLowerCase","includes","map","Form","onSubmit","event","preventDefault","form","target","addContact","elements","value","reset","pattern","title","required","Filter","onChange","input","payload","getIsLoading","isLoading","getError","error"],"sourceRoot":""}